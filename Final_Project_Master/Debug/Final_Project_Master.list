
Final_Project_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011b8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080012e8  080012e8  000112e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001300  08001300  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001300  08001300  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001300  08001300  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001300  08001300  00011300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001304  08001304  00011304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000010  08001318  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001318  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008702  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000146b  00000000  00000000  0002873b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002c8  00000000  00000000  00029ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00003059  00000000  00000000  00029e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004352  00000000  00000000  0002cec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000b0b2  00000000  00000000  0003121b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0003c2cd  2**0
                  CONTENTS, READONLY
 19 .debug_loc    00000f56  00000000  00000000  0003c348  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00000200  00000000  00000000  0003d2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  000007e8  00000000  00000000  0003d4a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	080012d0 	.word	0x080012d0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	080012d0 	.word	0x080012d0

08000170 <HAL_button_vInit>:
#include "STM32_F103C6_GPIO_Driver.h"




void HAL_button_vInit(GPIO_TypeDef *GPIOx,GPIO_PINConfig_t *Pinconfig){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	MCAL_GPIO_Init(GPIOx, &Pinconfig);
 800017a:	463b      	mov	r3, r7
 800017c:	4619      	mov	r1, r3
 800017e:	6878      	ldr	r0, [r7, #4]
 8000180:	f000 f878 	bl	8000274 <MCAL_GPIO_Init>
}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <HAL_button_u8read>:



uint8_t HAL_button_u8read(GPIO_TypeDef *GPIOx,uint8_t GPIO_PinNumber){
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
 8000194:	460b      	mov	r3, r1
 8000196:	70fb      	strb	r3, [r7, #3]
	return MCAL_GPIO_ReadPin(GPIOx, GPIO_PinNumber);
 8000198:	78fb      	ldrb	r3, [r7, #3]
 800019a:	b29b      	uxth	r3, r3
 800019c:	4619      	mov	r1, r3
 800019e:	6878      	ldr	r0, [r7, #4]
 80001a0:	f000 f8f5 	bl	800038e <MCAL_GPIO_ReadPin>
 80001a4:	4603      	mov	r3, r0
}
 80001a6:	4618      	mov	r0, r3
 80001a8:	3708      	adds	r7, #8
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}

080001ae <Get_CRLH_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	4603      	mov	r3, r0
 80001b6:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80001b8:	88fb      	ldrh	r3, [r7, #6]
 80001ba:	2b80      	cmp	r3, #128	; 0x80
 80001bc:	d042      	beq.n	8000244 <Get_CRLH_Position+0x96>
 80001be:	2b80      	cmp	r3, #128	; 0x80
 80001c0:	dc11      	bgt.n	80001e6 <Get_CRLH_Position+0x38>
 80001c2:	2b08      	cmp	r3, #8
 80001c4:	d036      	beq.n	8000234 <Get_CRLH_Position+0x86>
 80001c6:	2b08      	cmp	r3, #8
 80001c8:	dc06      	bgt.n	80001d8 <Get_CRLH_Position+0x2a>
 80001ca:	2b02      	cmp	r3, #2
 80001cc:	d02e      	beq.n	800022c <Get_CRLH_Position+0x7e>
 80001ce:	2b04      	cmp	r3, #4
 80001d0:	d02e      	beq.n	8000230 <Get_CRLH_Position+0x82>
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	d028      	beq.n	8000228 <Get_CRLH_Position+0x7a>
 80001d6:	e047      	b.n	8000268 <Get_CRLH_Position+0xba>
 80001d8:	2b20      	cmp	r3, #32
 80001da:	d02f      	beq.n	800023c <Get_CRLH_Position+0x8e>
 80001dc:	2b40      	cmp	r3, #64	; 0x40
 80001de:	d02f      	beq.n	8000240 <Get_CRLH_Position+0x92>
 80001e0:	2b10      	cmp	r3, #16
 80001e2:	d029      	beq.n	8000238 <Get_CRLH_Position+0x8a>
 80001e4:	e040      	b.n	8000268 <Get_CRLH_Position+0xba>
 80001e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ea:	d033      	beq.n	8000254 <Get_CRLH_Position+0xa6>
 80001ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001f0:	dc09      	bgt.n	8000206 <Get_CRLH_Position+0x58>
 80001f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001f6:	d029      	beq.n	800024c <Get_CRLH_Position+0x9e>
 80001f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001fc:	d028      	beq.n	8000250 <Get_CRLH_Position+0xa2>
 80001fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000202:	d021      	beq.n	8000248 <Get_CRLH_Position+0x9a>
 8000204:	e030      	b.n	8000268 <Get_CRLH_Position+0xba>
 8000206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800020a:	d027      	beq.n	800025c <Get_CRLH_Position+0xae>
 800020c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000210:	dc03      	bgt.n	800021a <Get_CRLH_Position+0x6c>
 8000212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000216:	d01f      	beq.n	8000258 <Get_CRLH_Position+0xaa>
 8000218:	e026      	b.n	8000268 <Get_CRLH_Position+0xba>
 800021a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800021e:	d01f      	beq.n	8000260 <Get_CRLH_Position+0xb2>
 8000220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000224:	d01e      	beq.n	8000264 <Get_CRLH_Position+0xb6>
 8000226:	e01f      	b.n	8000268 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 8000228:	2300      	movs	r3, #0
 800022a:	e01e      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 800022c:	2304      	movs	r3, #4
 800022e:	e01c      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 8000230:	2308      	movs	r3, #8
 8000232:	e01a      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 8000234:	230c      	movs	r3, #12
 8000236:	e018      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 8000238:	2310      	movs	r3, #16
 800023a:	e016      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_5:
		return 20 ;
 800023c:	2314      	movs	r3, #20
 800023e:	e014      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8000240:	2318      	movs	r3, #24
 8000242:	e012      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 8000244:	231c      	movs	r3, #28
 8000246:	e010      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 8000248:	2300      	movs	r3, #0
 800024a:	e00e      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 800024c:	2304      	movs	r3, #4
 800024e:	e00c      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000250:	2308      	movs	r3, #8
 8000252:	e00a      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000254:	230c      	movs	r3, #12
 8000256:	e008      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 8000258:	2310      	movs	r3, #16
 800025a:	e006      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 800025c:	2314      	movs	r3, #20
 800025e:	e004      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000260:	2318      	movs	r3, #24
 8000262:	e002      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000264:	231c      	movs	r3, #28
 8000266:	e000      	b.n	800026a <Get_CRLH_Position+0xbc>
		break ;


	}
	return 0 ;
 8000268:	2300      	movs	r3, #0

}
 800026a:	4618      	mov	r0, r3
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr

08000274 <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_PINConfig_t* PinConfig)
{
 8000274:	b590      	push	{r4, r7, lr}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >> 15
	volatile uint32_t* ConfigRegister = NULL;
 800027e:	2300      	movs	r3, #0
 8000280:	60bb      	str	r3, [r7, #8]

	uint8_t PIN_Config = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	73fb      	strb	r3, [r7, #15]
	ConfigRegister = (PinConfig->GPIO_PinNumber<GPIO_PIN_8)?(&GPIOx->GPIOx_CRL):(&GPIOx->GPIOx_CRH);
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	881b      	ldrh	r3, [r3, #0]
 800028a:	2bff      	cmp	r3, #255	; 0xff
 800028c:	d801      	bhi.n	8000292 <MCAL_GPIO_Init+0x1e>
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	e001      	b.n	8000296 <MCAL_GPIO_Init+0x22>
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3304      	adds	r3, #4
 8000296:	60bb      	str	r3, [r7, #8]
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ff86 	bl	80001ae <Get_CRLH_Position>
 80002a2:	4603      	mov	r3, r0
 80002a4:	461a      	mov	r2, r3
 80002a6:	230f      	movs	r3, #15
 80002a8:	4093      	lsls	r3, r2
 80002aa:	43da      	mvns	r2, r3
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	401a      	ands	r2, r3
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	789b      	ldrb	r3, [r3, #2]
 80002ba:	2b07      	cmp	r3, #7
 80002bc:	d00b      	beq.n	80002d6 <MCAL_GPIO_Init+0x62>
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	789b      	ldrb	r3, [r3, #2]
 80002c2:	2b06      	cmp	r3, #6
 80002c4:	d007      	beq.n	80002d6 <MCAL_GPIO_Init+0x62>
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	789b      	ldrb	r3, [r3, #2]
 80002ca:	2b05      	cmp	r3, #5
 80002cc:	d003      	beq.n	80002d6 <MCAL_GPIO_Init+0x62>
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	789b      	ldrb	r3, [r3, #2]
 80002d2:	2b04      	cmp	r3, #4
 80002d4:	d11c      	bne.n	8000310 <MCAL_GPIO_Init+0x9c>
	{
		//Set CNFy[1:0] and MODEx[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE -4) << 2) | ((PinConfig->GPIO_Output_Speed) << 0)) & 0x0F );
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	789b      	ldrb	r3, [r3, #2]
 80002da:	3b04      	subs	r3, #4
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	b25a      	sxtb	r2, r3
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	78db      	ldrb	r3, [r3, #3]
 80002e4:	b25b      	sxtb	r3, r3
 80002e6:	4313      	orrs	r3, r2
 80002e8:	b25b      	sxtb	r3, r3
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	f003 030f 	and.w	r3, r3, #15
 80002f0:	73fb      	strb	r3, [r7, #15]
		(*ConfigRegister) |= ( (PIN_Config) <<Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80002f2:	7bfc      	ldrb	r4, [r7, #15]
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff58 	bl	80001ae <Get_CRLH_Position>
 80002fe:	4603      	mov	r3, r0
 8000300:	fa04 f203 	lsl.w	r2, r4, r3
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	431a      	orrs	r2, r3
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	e02c      	b.n	800036a <MCAL_GPIO_Init+0xf6>
	}
	//if pin is input
	else //MODE = 00 :Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)||(PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) )
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	789b      	ldrb	r3, [r3, #2]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d003      	beq.n	8000320 <MCAL_GPIO_Init+0xac>
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	789b      	ldrb	r3, [r3, #2]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d107      	bne.n	8000330 <MCAL_GPIO_Init+0xbc>
		{
			//Set CNFy[1:0] and MODEx[1:0]
			PIN_Config = ( (((PinConfig->GPIO_MODE) << 2) | 0x0 ) & 0x0F );
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	789b      	ldrb	r3, [r3, #2]
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	b2db      	uxtb	r3, r3
 8000328:	f003 030f 	and.w	r3, r3, #15
 800032c:	73fb      	strb	r3, [r7, #15]
 800032e:	e01c      	b.n	800036a <MCAL_GPIO_Init+0xf6>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //consider it  as input  floating
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	789b      	ldrb	r3, [r3, #2]
 8000334:	2b08      	cmp	r3, #8
 8000336:	d102      	bne.n	800033e <MCAL_GPIO_Init+0xca>
		{
			//Set CNFy[1:0] and MODEx[1:0]
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO) << 2) | 0x0 ) & 0x0F );
 8000338:	2304      	movs	r3, #4
 800033a:	73fb      	strb	r3, [r7, #15]
 800033c:	e015      	b.n	800036a <MCAL_GPIO_Init+0xf6>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU) << 2) | 0x0 ) & 0x0F );
 800033e:	2308      	movs	r3, #8
 8000340:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	789b      	ldrb	r3, [r3, #2]
 8000346:	2b02      	cmp	r3, #2
 8000348:	d107      	bne.n	800035a <MCAL_GPIO_Init+0xe6>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->GPIOx_ODR |= PinConfig->GPIO_PinNumber;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	68db      	ldr	r3, [r3, #12]
 800034e:	683a      	ldr	r2, [r7, #0]
 8000350:	8812      	ldrh	r2, [r2, #0]
 8000352:	431a      	orrs	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	e007      	b.n	800036a <MCAL_GPIO_Init+0xf6>
			}else{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOx->GPIOx_ODR &= ~(PinConfig->GPIO_PinNumber);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	683a      	ldr	r2, [r7, #0]
 8000360:	8812      	ldrh	r2, [r2, #0]
 8000362:	43d2      	mvns	r2, r2
 8000364:	401a      	ands	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	60da      	str	r2, [r3, #12]

		}

	}
	//write on CRL or CRH
	(*ConfigRegister) |= ( (PIN_Config) <<Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 800036a:	7bfc      	ldrb	r4, [r7, #15]
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff1c 	bl	80001ae <Get_CRLH_Position>
 8000376:	4603      	mov	r3, r0
 8000378:	fa04 f203 	lsl.w	r2, r4, r3
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	431a      	orrs	r2, r3
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	601a      	str	r2, [r3, #0]
}
 8000386:	bf00      	nop
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	bd90      	pop	{r4, r7, pc}

0800038e <MCAL_GPIO_ReadPin>:
 * @param [in] 			-PinNumber: specifies the port bit to read. Set by @ref GPIO_PINS_define
 * @retval 				-The input port pin value.
 * Note					-none
 */
uint8_t  MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx , uint16_t PinNumber)
{	uint8_t bitstatus;
 800038e:	b480      	push	{r7}
 8000390:	b085      	sub	sp, #20
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	460b      	mov	r3, r1
 8000398:	807b      	strh	r3, [r7, #2]
if(((GPIOx->GPIOx_IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET){	//pin is 1
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	887b      	ldrh	r3, [r7, #2]
 80003a0:	4013      	ands	r3, r2
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d002      	beq.n	80003ac <MCAL_GPIO_ReadPin+0x1e>
	bitstatus=GPIO_PIN_SET;
 80003a6:	2301      	movs	r3, #1
 80003a8:	73fb      	strb	r3, [r7, #15]
 80003aa:	e001      	b.n	80003b0 <MCAL_GPIO_ReadPin+0x22>
}else{
	bitstatus=GPIO_PIN_RESET; //pin is 0
 80003ac:	2300      	movs	r3, #0
 80003ae:	73fb      	strb	r3, [r7, #15]
}
return bitstatus;
 80003b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3714      	adds	r7, #20
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx , uint16_t PinNumber, uint8_t Value)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	460b      	mov	r3, r1
 80003c6:	807b      	strh	r3, [r7, #2]
 80003c8:	4613      	mov	r3, r2
 80003ca:	707b      	strb	r3, [r7, #1]

	if(Value != GPIO_PIN_RESET)
 80003cc:	787b      	ldrb	r3, [r7, #1]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d003      	beq.n	80003da <MCAL_GPIO_WritePin+0x1e>
	{
		//	Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//	These bits are write-only and can be accessed in Word mode only.
		//	0: No action on the corresponding ODRx bit
		//	1: Set the corresponding ODRx bit
		GPIOx->GPIOx_BSRR=(uint32_t)PinNumber;
 80003d2:	887a      	ldrh	r2, [r7, #2]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	611a      	str	r2, [r3, #16]


		//	or
		//	GPIOx->GPIOx_ODR &= ~(PinNumber) ;
	}
}
 80003d8:	e002      	b.n	80003e0 <MCAL_GPIO_WritePin+0x24>
		GPIOx->GPIOx_BRR=(uint32_t)PinNumber;
 80003da:	887a      	ldrh	r2, [r7, #2]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	615a      	str	r2, [r3, #20]
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
	...

080003ec <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
	//	Set and cleared by hardware to indicate which clock source is used as system clock.
	//	00: HSI oscillator used as system clock
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: Not applicable
	switch  ( (RCC->RCC_CFGR  >> 2  ) & 0b11 )
 80003f0:	4b0a      	ldr	r3, [pc, #40]	; (800041c <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	089b      	lsrs	r3, r3, #2
 80003f6:	f003 0303 	and.w	r3, r3, #3
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d006      	beq.n	800040c <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d302      	bcc.n	8000408 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 8000402:	2b02      	cmp	r3, #2
 8000404:	d004      	beq.n	8000410 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 8000406:	e005      	b.n	8000414 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:
		return HSI_RC_Clk ;
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 800040a:	e003      	b.n	8000414 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:
		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 800040e:	e001      	b.n	8000414 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:
		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000412:	e7ff      	b.n	8000414 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;
	}
}
 8000414:	4618      	mov	r0, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	40021000 	.word	0x40021000
 8000420:	007a1200 	.word	0x007a1200
 8000424:	00f42400 	.word	0x00f42400

08000428 <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->RCC_CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 800042c:	f7ff ffde 	bl	80003ec <MCAL_RCC_GetSYS_CLCKFreq>
 8000430:	4601      	mov	r1, r0
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	091b      	lsrs	r3, r3, #4
 8000438:	f003 030f 	and.w	r3, r3, #15
 800043c:	4a03      	ldr	r2, [pc, #12]	; (800044c <MCAL_RCC_GetHCLKFreq+0x24>)
 800043e:	5cd3      	ldrb	r3, [r2, r3]
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000444:	4618      	mov	r0, r3
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40021000 	.word	0x40021000
 800044c:	080012f0 	.word	0x080012f0

08000450 <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->RCC_CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 8000454:	f7ff ffe8 	bl	8000428 <MCAL_RCC_GetHCLKFreq>
 8000458:	4601      	mov	r1, r0
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <MCAL_RCC_GetPCLK1Freq+0x20>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	f003 0307 	and.w	r3, r3, #7
 8000464:	4a03      	ldr	r2, [pc, #12]	; (8000474 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000466:	5cd3      	ldrb	r3, [r2, r3]
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800046c:	4618      	mov	r0, r3
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40021000 	.word	0x40021000
 8000474:	080012e8 	.word	0x080012e8

08000478 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->RCC_CFGR >> 11 ) & 0b111) ]  ); //the first shift is multiplication
 800047c:	f7ff ffd4 	bl	8000428 <MCAL_RCC_GetHCLKFreq>
 8000480:	4601      	mov	r1, r0
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	0adb      	lsrs	r3, r3, #11
 8000488:	f003 0307 	and.w	r3, r3, #7
 800048c:	4a03      	ldr	r2, [pc, #12]	; (800049c <MCAL_RCC_GetPCLK2Freq+0x24>)
 800048e:	5cd3      	ldrb	r3, [r2, r3]
 8000490:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000494:	4618      	mov	r0, r3
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40021000 	.word	0x40021000
 800049c:	080012e8 	.word	0x080012e8

080004a0 <MCAL_SPI_Init>:
 * @retval 			-none
 * Note				- Support for SPI Full Duplex Master/Slave only  & NSS HW/SW
 * 					- in case of master you have to configure pin and drive it
 */
void MCAL_SPI_Init (SPI_TypeDef *SPIx, SPI_Config_t* SPI_Config)
{
 80004a0:	b4b0      	push	{r4, r5, r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
	uint16_t tmpreg_CR1 = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	81fb      	strh	r3, [r7, #14]
	uint16_t tmpreg_CR2 = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	81bb      	strh	r3, [r7, #12]

	if (SPIx == SPI1)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a49      	ldr	r2, [pc, #292]	; (80005dc <MCAL_SPI_Init+0x13c>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d113      	bne.n	80004e2 <MCAL_SPI_Init+0x42>
	{
		Global_SPI_Config1 = *SPI_Config ;
 80004ba:	4a49      	ldr	r2, [pc, #292]	; (80005e0 <MCAL_SPI_Init+0x140>)
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	4614      	mov	r4, r2
 80004c0:	461d      	mov	r5, r3
 80004c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004ca:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Config[SPI1_INDEX] =  &Global_SPI_Config1 ;
 80004ce:	4b45      	ldr	r3, [pc, #276]	; (80005e4 <MCAL_SPI_Init+0x144>)
 80004d0:	4a43      	ldr	r2, [pc, #268]	; (80005e0 <MCAL_SPI_Init+0x140>)
 80004d2:	601a      	str	r2, [r3, #0]
		RCC_SPI1_CLK_EN();
 80004d4:	4b44      	ldr	r3, [pc, #272]	; (80005e8 <MCAL_SPI_Init+0x148>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a43      	ldr	r2, [pc, #268]	; (80005e8 <MCAL_SPI_Init+0x148>)
 80004da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	e016      	b.n	8000510 <MCAL_SPI_Init+0x70>

	}else if (SPIx == SPI2)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a41      	ldr	r2, [pc, #260]	; (80005ec <MCAL_SPI_Init+0x14c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d112      	bne.n	8000510 <MCAL_SPI_Init+0x70>
	{
		Global_SPI_Config2 = *SPI_Config ;
 80004ea:	4a41      	ldr	r2, [pc, #260]	; (80005f0 <MCAL_SPI_Init+0x150>)
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	4614      	mov	r4, r2
 80004f0:	461d      	mov	r5, r3
 80004f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004fa:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Config[SPI2_INDEX] =  &Global_SPI_Config2 ;
 80004fe:	4b39      	ldr	r3, [pc, #228]	; (80005e4 <MCAL_SPI_Init+0x144>)
 8000500:	4a3b      	ldr	r2, [pc, #236]	; (80005f0 <MCAL_SPI_Init+0x150>)
 8000502:	605a      	str	r2, [r3, #4]
		RCC_SPI2_CLK_EN();
 8000504:	4b38      	ldr	r3, [pc, #224]	; (80005e8 <MCAL_SPI_Init+0x148>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a37      	ldr	r2, [pc, #220]	; (80005e8 <MCAL_SPI_Init+0x148>)
 800050a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800050e:	6193      	str	r3, [r2, #24]

	}


	//Enabe SPI  CR1:Bit 6 SPE: SPI enable
	tmpreg_CR1 = (0x1U<<6) ;
 8000510:	2340      	movs	r3, #64	; 0x40
 8000512:	81fb      	strh	r3, [r7, #14]

	//Master or Slave
	tmpreg_CR1 |=  SPI_Config->Device_Mode ;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	881a      	ldrh	r2, [r3, #0]
 8000518:	89fb      	ldrh	r3, [r7, #14]
 800051a:	4313      	orrs	r3, r2
 800051c:	81fb      	strh	r3, [r7, #14]

	//SPI_Communication_Mode
	tmpreg_CR1 |=  SPI_Config->Communication_Mode ;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	885a      	ldrh	r2, [r3, #2]
 8000522:	89fb      	ldrh	r3, [r7, #14]
 8000524:	4313      	orrs	r3, r2
 8000526:	81fb      	strh	r3, [r7, #14]

	//SPI_Frame_Format
	tmpreg_CR1 |=  SPI_Config->Frame_Format ;
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	889a      	ldrh	r2, [r3, #4]
 800052c:	89fb      	ldrh	r3, [r7, #14]
 800052e:	4313      	orrs	r3, r2
 8000530:	81fb      	strh	r3, [r7, #14]

	//SPI_DataSize
	tmpreg_CR1 |=  SPI_Config->DataSize ;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	88da      	ldrh	r2, [r3, #6]
 8000536:	89fb      	ldrh	r3, [r7, #14]
 8000538:	4313      	orrs	r3, r2
 800053a:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Polarity
	tmpreg_CR1 |=  SPI_Config->CLKPolarity ;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	891a      	ldrh	r2, [r3, #8]
 8000540:	89fb      	ldrh	r3, [r7, #14]
 8000542:	4313      	orrs	r3, r2
 8000544:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Phase
	tmpreg_CR1 |=  SPI_Config->CLKPhase ;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	895a      	ldrh	r2, [r3, #10]
 800054a:	89fb      	ldrh	r3, [r7, #14]
 800054c:	4313      	orrs	r3, r2
 800054e:	81fb      	strh	r3, [r7, #14]

	//======================NSS=================================

	if (SPI_Config->NSS == SPI_NSS_Hard_Master_SS_output_enable )
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	899b      	ldrh	r3, [r3, #12]
 8000554:	2b04      	cmp	r3, #4
 8000556:	d105      	bne.n	8000564 <MCAL_SPI_Init+0xc4>
	{
		tmpreg_CR2 |=  SPI_Config->NSS ;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	899a      	ldrh	r2, [r3, #12]
 800055c:	89bb      	ldrh	r3, [r7, #12]
 800055e:	4313      	orrs	r3, r2
 8000560:	81bb      	strh	r3, [r7, #12]
 8000562:	e004      	b.n	800056e <MCAL_SPI_Init+0xce>
	{
		tmpreg_CR2 &=  SPI_Config->NSS ;

	}else
	{
		tmpreg_CR1 |=  SPI_Config->NSS ;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	899a      	ldrh	r2, [r3, #12]
 8000568:	89fb      	ldrh	r3, [r7, #14]
 800056a:	4313      	orrs	r3, r2
 800056c:	81fb      	strh	r3, [r7, #14]

	//=======================================================


	//SPI_BAUDRATEPRESCALER
	tmpreg_CR1 |=  SPI_Config->SPI_BAUDRATEPRESCALER ;
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	89da      	ldrh	r2, [r3, #14]
 8000572:	89fb      	ldrh	r3, [r7, #14]
 8000574:	4313      	orrs	r3, r2
 8000576:	81fb      	strh	r3, [r7, #14]


	if (SPI_Config->IRQ_Enable  != SPI_IRQ_Enable_NONE)
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	8a1b      	ldrh	r3, [r3, #16]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d019      	beq.n	80005b4 <MCAL_SPI_Init+0x114>
	{
		// SPI_IRQ_Enable_define
		tmpreg_CR2 |= SPI_Config->IRQ_Enable ;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	8a1a      	ldrh	r2, [r3, #16]
 8000584:	89bb      	ldrh	r3, [r7, #12]
 8000586:	4313      	orrs	r3, r2
 8000588:	81bb      	strh	r3, [r7, #12]


		if (SPIx == SPI1)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <MCAL_SPI_Init+0x13c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d106      	bne.n	80005a0 <MCAL_SPI_Init+0x100>
		{
			NVIC_IRQ35_SPI1_Enable ;
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MCAL_SPI_Init+0x154>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <MCAL_SPI_Init+0x154>)
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	6013      	str	r3, [r2, #0]
 800059e:	e009      	b.n	80005b4 <MCAL_SPI_Init+0x114>

		}else if (SPIx == SPI2)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a12      	ldr	r2, [pc, #72]	; (80005ec <MCAL_SPI_Init+0x14c>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d105      	bne.n	80005b4 <MCAL_SPI_Init+0x114>
		{
			NVIC_IRQ36_SPI2_Enable ;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MCAL_SPI_Init+0x154>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <MCAL_SPI_Init+0x154>)
 80005ae:	f043 0310 	orr.w	r3, r3, #16
 80005b2:	6013      	str	r3, [r2, #0]

	}



	SPIx->SPI_CR1 = tmpreg_CR1 ;
 80005b4:	89fa      	ldrh	r2, [r7, #14]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = tmpreg_CR2 ;
 80005ba:	89ba      	ldrh	r2, [r7, #12]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	605a      	str	r2, [r3, #4]

	/* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
	SPIx->SPI_I2SCFGR &= ~(1<<11);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	69db      	ldr	r3, [r3, #28]
 80005c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	61da      	str	r2, [r3, #28]

	SPIx->SPI_CRCPR = 0x0 ;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bcb0      	pop	{r4, r5, r7}
 80005da:	4770      	bx	lr
 80005dc:	40013000 	.word	0x40013000
 80005e0:	20000078 	.word	0x20000078
 80005e4:	2000002c 	.word	0x2000002c
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40003800 	.word	0x40003800
 80005f0:	20000060 	.word	0x20000060
 80005f4:	e000e104 	.word	0xe000e104

080005f8 <MCAL_SPI_SendData>:


}

void MCAL_SPI_SendData	(SPI_TypeDef *SPIx, uint16_t *pTxBuffer,enum PollingMechism PollingEn )
{
 80005f8:	b480      	push	{r7}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	4613      	mov	r3, r2
 8000604:	71fb      	strb	r3, [r7, #7]
	uint8_t index = 0 ;
 8000606:	2300      	movs	r3, #0
 8000608:	75fb      	strb	r3, [r7, #23]
	if (SPIx == SPI1)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4a17      	ldr	r2, [pc, #92]	; (800066c <MCAL_SPI_SendData+0x74>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d102      	bne.n	8000618 <MCAL_SPI_SendData+0x20>
	{
		index =  SPI1_INDEX ;
 8000612:	2300      	movs	r3, #0
 8000614:	75fb      	strb	r3, [r7, #23]
 8000616:	e005      	b.n	8000624 <MCAL_SPI_SendData+0x2c>

	}else if (SPIx == SPI2)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4a15      	ldr	r2, [pc, #84]	; (8000670 <MCAL_SPI_SendData+0x78>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d101      	bne.n	8000624 <MCAL_SPI_SendData+0x2c>
	{
		index =  SPI2_INDEX ;
 8000620:	2301      	movs	r3, #1
 8000622:	75fb      	strb	r3, [r7, #23]
	}

	if (Global_SPI_Config[index]->Communication_Mode ==  SPI_DIRECTION_2LINES || Global_SPI_Config[index]->Communication_Mode == SPI_DIRECTION_1LINE_transmit_only) {
 8000624:	7dfb      	ldrb	r3, [r7, #23]
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <MCAL_SPI_SendData+0x7c>)
 8000628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062c:	885b      	ldrh	r3, [r3, #2]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d007      	beq.n	8000642 <MCAL_SPI_SendData+0x4a>
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <MCAL_SPI_SendData+0x7c>)
 8000636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063a:	885b      	ldrh	r3, [r3, #2]
 800063c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000640:	d10e      	bne.n	8000660 <MCAL_SPI_SendData+0x68>
		if (PollingEn == Pollingenable) //Bit 1 TXE: Transmit buffer empty
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d106      	bne.n	8000656 <MCAL_SPI_SendData+0x5e>
			while(!((SPIx)->SPI_SR & SPI_SR_TXE)); //wait till flag is set == empty DR
 8000648:	bf00      	nop
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0f9      	beq.n	800064a <MCAL_SPI_SendData+0x52>

		SPIx->SPI_DR =  (*pTxBuffer ) ;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	60da      	str	r2, [r3, #12]
	else
	{
		//todo
	}

}
 8000660:	bf00      	nop
 8000662:	371c      	adds	r7, #28
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40013000 	.word	0x40013000
 8000670:	40003800 	.word	0x40003800
 8000674:	2000002c 	.word	0x2000002c

08000678 <MCAL_SPI_GPIO_Set_Pins>:
}



void MCAL_SPI_GPIO_Set_Pins (SPI_TypeDef *SPIx)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	GPIO_PINConfig_t PinCfg ;

	if (SPIx == SPI1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a73      	ldr	r2, [pc, #460]	; (8000850 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d169      	bne.n	800075c <MCAL_SPI_GPIO_Set_Pins+0xe4>
		//		PA4 : SPI1_NSS
		//		PA5 : SPI1_SCK
		//		PA6 : SPI1_MISO
		//		PA7 : SPI1_MOSI

		if (Global_SPI_Config[SPI1_INDEX]->Device_Mode == SPI_Device_Mode_MASTER )
 8000688:	4b72      	ldr	r3, [pc, #456]	; (8000854 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	2b04      	cmp	r3, #4
 8000690:	d134      	bne.n	80006fc <MCAL_SPI_GPIO_Set_Pins+0x84>
		{


			//PA4 : SPI1_NSS

			switch  (Global_SPI_Config[SPI1_INDEX]->NSS)
 8000692:	4b70      	ldr	r3, [pc, #448]	; (8000854 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	899b      	ldrh	r3, [r3, #12]
 8000698:	2b04      	cmp	r3, #4
 800069a:	d10c      	bne.n	80006b6 <MCAL_SPI_GPIO_Set_Pins+0x3e>
				break ;


			case SPI_NSS_Hard_Master_SS_output_enable:
				//Hardware master/ NSS output enabled Alternate function push-pull
				PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 800069c:	2310      	movs	r3, #16
 800069e:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80006a0:	2306      	movs	r3, #6
 80006a2:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006a4:	2301      	movs	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	4619      	mov	r1, r3
 80006ae:	486a      	ldr	r0, [pc, #424]	; (8000858 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80006b0:	f7ff fde0 	bl	8000274 <MCAL_GPIO_Init>
				break ;
 80006b4:	bf00      	nop
			}


			//	PA5 : SPI1_SCK
			//	Master Alternate function push-pull
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80006b6:	2320      	movs	r3, #32
 80006b8:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80006ba:	2306      	movs	r3, #6
 80006bc:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006be:	2301      	movs	r3, #1
 80006c0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4619      	mov	r1, r3
 80006c8:	4863      	ldr	r0, [pc, #396]	; (8000858 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80006ca:	f7ff fdd3 	bl	8000274 <MCAL_GPIO_Init>


			//	PA6 : SPI1_MISO  (supported only full duplex)
			//	Full duplex / master Input floating

			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80006ce:	2340      	movs	r3, #64	; 0x40
 80006d0:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80006d2:	2301      	movs	r3, #1
 80006d4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	4619      	mov	r1, r3
 80006dc:	485e      	ldr	r0, [pc, #376]	; (8000858 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80006de:	f7ff fdc9 	bl	8000274 <MCAL_GPIO_Init>


			//  PA7 : SPI1_MOSI
			//	Full duplex / master Alternate function push-pull

			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80006e6:	2306      	movs	r3, #6
 80006e8:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006ea:	2301      	movs	r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4619      	mov	r1, r3
 80006f4:	4858      	ldr	r0, [pc, #352]	; (8000858 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80006f6:	f7ff fdbd 	bl	8000274 <MCAL_GPIO_Init>
		}


	}

}
 80006fa:	e0a5      	b.n	8000848 <MCAL_SPI_GPIO_Set_Pins+0x1d0>
			if   (Global_SPI_Config[SPI1_INDEX]->NSS == SPI_NSS_Hard_Slave)
 80006fc:	4b55      	ldr	r3, [pc, #340]	; (8000854 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	899b      	ldrh	r3, [r3, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d109      	bne.n	800071a <MCAL_SPI_GPIO_Set_Pins+0xa2>
			PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000706:	2310      	movs	r3, #16
 8000708:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800070a:	2301      	movs	r3, #1
 800070c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	4619      	mov	r1, r3
 8000714:	4850      	ldr	r0, [pc, #320]	; (8000858 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000716:	f7ff fdad 	bl	8000274 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800071a:	2320      	movs	r3, #32
 800071c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800071e:	2301      	movs	r3, #1
 8000720:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	4619      	mov	r1, r3
 8000728:	484b      	ldr	r0, [pc, #300]	; (8000858 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800072a:	f7ff fda3 	bl	8000274 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800072e:	2340      	movs	r3, #64	; 0x40
 8000730:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000732:	2306      	movs	r3, #6
 8000734:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000736:	2301      	movs	r3, #1
 8000738:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	4619      	mov	r1, r3
 8000740:	4845      	ldr	r0, [pc, #276]	; (8000858 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000742:	f7ff fd97 	bl	8000274 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800074a:	2301      	movs	r3, #1
 800074c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4619      	mov	r1, r3
 8000754:	4840      	ldr	r0, [pc, #256]	; (8000858 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000756:	f7ff fd8d 	bl	8000274 <MCAL_GPIO_Init>
}
 800075a:	e075      	b.n	8000848 <MCAL_SPI_GPIO_Set_Pins+0x1d0>
	}else if (SPIx == SPI2)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a3f      	ldr	r2, [pc, #252]	; (800085c <MCAL_SPI_GPIO_Set_Pins+0x1e4>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d171      	bne.n	8000848 <MCAL_SPI_GPIO_Set_Pins+0x1d0>
		if (Global_SPI_Config[SPI2_INDEX]->Device_Mode == SPI_Device_Mode_MASTER )
 8000764:	4b3b      	ldr	r3, [pc, #236]	; (8000854 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	2b04      	cmp	r3, #4
 800076c:	d138      	bne.n	80007e0 <MCAL_SPI_GPIO_Set_Pins+0x168>
			switch  (Global_SPI_Config[SPI2_INDEX]->NSS)
 800076e:	4b39      	ldr	r3, [pc, #228]	; (8000854 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	899b      	ldrh	r3, [r3, #12]
 8000774:	2b04      	cmp	r3, #4
 8000776:	d10d      	bne.n	8000794 <MCAL_SPI_GPIO_Set_Pins+0x11c>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800077e:	2306      	movs	r3, #6
 8000780:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000782:	2301      	movs	r3, #1
 8000784:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	4834      	ldr	r0, [pc, #208]	; (8000860 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 800078e:	f7ff fd71 	bl	8000274 <MCAL_GPIO_Init>
				break ;
 8000792:	bf00      	nop
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800079a:	2306      	movs	r3, #6
 800079c:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800079e:	2301      	movs	r3, #1
 80007a0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4619      	mov	r1, r3
 80007a8:	482d      	ldr	r0, [pc, #180]	; (8000860 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80007aa:	f7ff fd63 	bl	8000274 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 80007ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007b2:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80007b4:	2301      	movs	r3, #1
 80007b6:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	4828      	ldr	r0, [pc, #160]	; (8000860 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80007c0:	f7ff fd58 	bl	8000274 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 80007c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007c8:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80007ca:	2306      	movs	r3, #6
 80007cc:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80007ce:	2301      	movs	r3, #1
 80007d0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	4619      	mov	r1, r3
 80007d8:	4821      	ldr	r0, [pc, #132]	; (8000860 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80007da:	f7ff fd4b 	bl	8000274 <MCAL_GPIO_Init>
}
 80007de:	e033      	b.n	8000848 <MCAL_SPI_GPIO_Set_Pins+0x1d0>
			switch  (Global_SPI_Config[SPI2_INDEX]->NSS)
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	899b      	ldrh	r3, [r3, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d10b      	bne.n	8000802 <MCAL_SPI_GPIO_Set_Pins+0x18a>
				PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80007ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ee:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80007f0:	2301      	movs	r3, #1
 80007f2:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	4819      	ldr	r0, [pc, #100]	; (8000860 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80007fc:	f7ff fd3a 	bl	8000274 <MCAL_GPIO_Init>
				break ;
 8000800:	bf00      	nop
			PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000806:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000808:	2301      	movs	r3, #1
 800080a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	4619      	mov	r1, r3
 8000812:	4813      	ldr	r0, [pc, #76]	; (8000860 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000814:	f7ff fd2e 	bl	8000274 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000818:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800081c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800081e:	2306      	movs	r3, #6
 8000820:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000822:	2301      	movs	r3, #1
 8000824:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 800082e:	f7ff fd21 	bl	8000274 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000836:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000838:	2301      	movs	r3, #1
 800083a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000844:	f7ff fd16 	bl	8000274 <MCAL_GPIO_Init>
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40013000 	.word	0x40013000
 8000854:	2000002c 	.word	0x2000002c
 8000858:	40010800 	.word	0x40010800
 800085c:	40003800 	.word	0x40003800
 8000860:	40010c00 	.word	0x40010c00

08000864 <SPI1_IRQHandler>:
 * 											IRQ
 * =======================================================================================
 */
//ISR
void SPI1_IRQHandler (void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE = ( ( SPI1->SPI_SR &  (1<<1)) >> 1 );
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <SPI1_IRQHandler+0x54>)
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	085b      	lsrs	r3, r3, #1
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	793b      	ldrb	r3, [r7, #4]
 8000878:	f362 0300 	bfi	r3, r2, #0, #1
 800087c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR &  (1<<0)) >> 0 );
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <SPI1_IRQHandler+0x54>)
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	793b      	ldrb	r3, [r7, #4]
 800088a:	f362 0341 	bfi	r3, r2, #1, #1
 800088e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR &  (1<<4)) >> 4 );
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <SPI1_IRQHandler+0x54>)
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	091b      	lsrs	r3, r3, #4
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	b2da      	uxtb	r2, r3
 800089c:	793b      	ldrb	r3, [r7, #4]
 800089e:	f362 0382 	bfi	r3, r2, #2, #1
 80008a2:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack (irq_src) ;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <SPI1_IRQHandler+0x58>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	7938      	ldrb	r0, [r7, #4]
 80008ac:	4798      	blx	r3

}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40013000 	.word	0x40013000
 80008bc:	2000002c 	.word	0x2000002c

080008c0 <SPI2_IRQHandler>:
void SPI2_IRQHandler (void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( ( SPI2->SPI_SR &  (1<<1)) >> 1 );			//(1<<1)) >> 1   as TXE ,RXNE,ERRI are bitfields that hold 1 or 0 only
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <SPI2_IRQHandler+0x54>)
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	085b      	lsrs	r3, r3, #1
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	793b      	ldrb	r3, [r7, #4]
 80008d4:	f362 0300 	bfi	r3, r2, #0, #1
 80008d8:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI2->SPI_SR &  (1<<0)) >> 0 );
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <SPI2_IRQHandler+0x54>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	793b      	ldrb	r3, [r7, #4]
 80008e6:	f362 0341 	bfi	r3, r2, #1, #1
 80008ea:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI2->SPI_SR &  (1<<4)) >> 4 );
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <SPI2_IRQHandler+0x54>)
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	091b      	lsrs	r3, r3, #4
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	793b      	ldrb	r3, [r7, #4]
 80008fa:	f362 0382 	bfi	r3, r2, #2, #1
 80008fe:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack (irq_src) ;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <SPI2_IRQHandler+0x58>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	7938      	ldrb	r0, [r7, #4]
 8000908:	4798      	blx	r3
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40003800 	.word	0x40003800
 8000918:	2000002c 	.word	0x2000002c

0800091c <MCAL_SYSTICK_Init>:
 * @brief 			- Initializes the SYSTICK peripheral according to the specified parameters in the Systick_Config_t
 * @param [in] 		- *pSystickConfig point to structure that holds configuration of systick timer.
 * @retval 			- none
 * Note				- none
 */
void MCAL_SYSTICK_Init(Systick_Config_t* pSystickConfig ){
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	SYSTICK_STK_CTRL = 0x0000;
 8000924:	4b1d      	ldr	r3, [pc, #116]	; (800099c <MCAL_SYSTICK_Init+0x80>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
//	SYSTICK->STK_CTRL = 0x0000;
	if(pSystickConfig->CLKSOURCE == CLKSOURCE_AHB){
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d109      	bne.n	8000946 <MCAL_SYSTICK_Init+0x2a>
		//SYSTICK->STK_CTRL |= (1<<2);
		SYSTICK_STK_CTRL |= (1<<2);
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MCAL_SYSTICK_Init+0x80>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a19      	ldr	r2, [pc, #100]	; (800099c <MCAL_SYSTICK_Init+0x80>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6013      	str	r3, [r2, #0]
		systick_clk =8; // assume HSI is used
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MCAL_SYSTICK_Init+0x84>)
 8000940:	2208      	movs	r2, #8
 8000942:	701a      	strb	r2, [r3, #0]
 8000944:	e00c      	b.n	8000960 <MCAL_SYSTICK_Init+0x44>

	}else if(pSystickConfig->CLKSOURCE == CLKSOURCE_AHB_8){
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d108      	bne.n	8000960 <MCAL_SYSTICK_Init+0x44>
		//SYSTICK->STK_CTRL&= ~(1<<2);
		SYSTICK_STK_CTRL &= ~(1<<2);
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MCAL_SYSTICK_Init+0x80>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <MCAL_SYSTICK_Init+0x80>)
 8000954:	f023 0304 	bic.w	r3, r3, #4
 8000958:	6013      	str	r3, [r2, #0]
		systick_clk=1;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MCAL_SYSTICK_Init+0x84>)
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
	}

	if(pSystickConfig->SYSTICK_INT == SYSTICK_INT_enable){
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	785b      	ldrb	r3, [r3, #1]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d109      	bne.n	800097c <MCAL_SYSTICK_Init+0x60>
		//SYSTICK->STK_CTRL|= (1<<1);
	    SYSTICK_STK_CTRL |= (1<<1);
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MCAL_SYSTICK_Init+0x80>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0b      	ldr	r2, [pc, #44]	; (800099c <MCAL_SYSTICK_Init+0x80>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	6013      	str	r3, [r2, #0]
		GlobalSystickConfig = pSystickConfig;
 8000974:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <MCAL_SYSTICK_Init+0x88>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
	else if(pSystickConfig->SYSTICK_INT == SYSTICK_INT_disable){
		//SYSTICK->STK_CTRL &= ~(1<<1);
		SYSTICK_STK_CTRL &= ~(1<<1);
		//todo
	}
}
 800097a:	e009      	b.n	8000990 <MCAL_SYSTICK_Init+0x74>
	else if(pSystickConfig->SYSTICK_INT == SYSTICK_INT_disable){
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	785b      	ldrb	r3, [r3, #1]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d105      	bne.n	8000990 <MCAL_SYSTICK_Init+0x74>
		SYSTICK_STK_CTRL &= ~(1<<1);
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <MCAL_SYSTICK_Init+0x80>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <MCAL_SYSTICK_Init+0x80>)
 800098a:	f023 0302 	bic.w	r3, r3, #2
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000e010 	.word	0xe000e010
 80009a0:	2000000c 	.word	0x2000000c
 80009a4:	20000034 	.word	0x20000034

080009a8 <MCAL_SYSTICK_disable>:





void MCAL_SYSTICK_disable(void){
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
	//SYSTICK->STK_CTRL= 0x0000;
	SYSTICK_STK_CTRL = 0x0000;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MCAL_SYSTICK_disable+0x20>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
	CLR_BIT(SYSTICK_STK_CTRL,0);
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <MCAL_SYSTICK_disable+0x20>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <MCAL_SYSTICK_disable+0x20>)
 80009b8:	f023 0301 	bic.w	r3, r3, #1
 80009bc:	6013      	str	r3, [r2, #0]
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000e010 	.word	0xe000e010

080009cc <MCAL_SYSTICK_delay_ms>:

void MCAL_SYSTICK_delay_ms(uint32_t ms){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	//SET_BIT(SYSTICK->STK_CTRL,0);
	SET_BIT(SYSTICK_STK_CTRL,0);
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MCAL_SYSTICK_delay_ms+0x54>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <MCAL_SYSTICK_delay_ms+0x54>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]
	//SYSTICK->STK_LOAD= ((ms*1000)*systick_clk-1);
	SYSTICK_STK_LOAD= ((ms*1000)*systick_clk-1);
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MCAL_SYSTICK_delay_ms+0x58>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	fb03 f302 	mul.w	r3, r3, r2
 80009ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009f0:	fb02 f303 	mul.w	r3, r2, r3
 80009f4:	4a0c      	ldr	r2, [pc, #48]	; (8000a28 <MCAL_SYSTICK_delay_ms+0x5c>)
 80009f6:	3b01      	subs	r3, #1
 80009f8:	6013      	str	r3, [r2, #0]
	if(GET_BIT(SYSTICK_STK_CTRL,1) == 0){
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MCAL_SYSTICK_delay_ms+0x54>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	085b      	lsrs	r3, r3, #1
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d104      	bne.n	8000a12 <MCAL_SYSTICK_delay_ms+0x46>
		while(SYSTICK_STK_VAL != 0 );
 8000a08:	bf00      	nop
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MCAL_SYSTICK_delay_ms+0x60>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1fb      	bne.n	8000a0a <MCAL_SYSTICK_delay_ms+0x3e>
	}
	/*if(GET_BIT(SYSTICK->STK_CTRL,1) == 0){
			while(SYSTICK->STK_VAL != 0 );
		}*/
	MCAL_SYSTICK_disable();
 8000a12:	f7ff ffc9 	bl	80009a8 <MCAL_SYSTICK_disable>

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	e000e010 	.word	0xe000e010
 8000a24:	2000000c 	.word	0x2000000c
 8000a28:	e000e014 	.word	0xe000e014
 8000a2c:	e000e018 	.word	0xe000e018

08000a30 <SysTick_Handler>:
			}
	MCAL_SYSTICK_disable();
}


void SysTick_Handler(void){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

	// Check if the setCallBack is Null */

	    	GlobalSystickConfig->pSystick_Call_back(); /* call the function in the scheduler using call-back concept */
 8000a34:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <SysTick_Handler+0x10>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	4798      	blx	r3


}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000034 	.word	0x20000034

08000a44 <Timer2_init>:

#include "Timer.h"


void Timer2_init(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
	RCC__APB1ENR |=(1<<0);     //Enable Rcc for tim2
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <Timer2_init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <Timer2_init+0x40>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6013      	str	r3, [r2, #0]
	TIM2_PSC = 7;             //Clk_input=(8M/(7+1))=1MHZ
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <Timer2_init+0x44>)
 8000a56:	2207      	movs	r2, #7
 8000a58:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xC350;        //to make interrupt after 50000 tike(50000*10^-6)=0.05s
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <Timer2_init+0x48>)
 8000a5c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000a60:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 8000a62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 8000a72:	bf00      	nop
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <Timer2_init+0x4c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d0fb      	beq.n	8000a74 <Timer2_init+0x30>
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	4002101c 	.word	0x4002101c
 8000a88:	40000028 	.word	0x40000028
 8000a8c:	4000002c 	.word	0x4000002c
 8000a90:	40000010 	.word	0x40000010

08000a94 <dus>:

void dus(int us)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	TIM2_CNT=0;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <dus+0x24>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<us);
 8000aa2:	bf00      	nop
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <dus+0x24>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d3fa      	bcc.n	8000aa4 <dus+0x10>
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	40000024 	.word	0x40000024

08000abc <dms>:

void dms(int ms)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	int i=0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
	for(i=0;i<ms;i++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	e006      	b.n	8000adc <dms+0x20>
	{
		dus(1000);
 8000ace:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad2:	f7ff ffdf 	bl	8000a94 <dus>
	for(i=0;i<ms;i++)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbf4      	blt.n	8000ace <dms+0x12>
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, UART_Config* UART_Config)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
	//Global_UART_Config = UART_Config ;
	uint32_t pclk ,BRR  ;
	//	enable the Clock for given USART peripheral

	if ( USARTx == USART1 ){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a63      	ldr	r2, [pc, #396]	; (8000c88 <MCAL_UART_Init+0x19c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d110      	bne.n	8000b20 <MCAL_UART_Init+0x34>
		RCC_USART1_CLK_EN();
 8000afe:	4b63      	ldr	r3, [pc, #396]	; (8000c8c <MCAL_UART_Init+0x1a0>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4a62      	ldr	r2, [pc, #392]	; (8000c8c <MCAL_UART_Init+0x1a0>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	6193      	str	r3, [r2, #24]
		USART_Index = 0 ;
 8000b0a:	4b61      	ldr	r3, [pc, #388]	; (8000c90 <MCAL_UART_Init+0x1a4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		Global_UART_Config[USART_Index] = UART_Config ;
 8000b10:	4b5f      	ldr	r3, [pc, #380]	; (8000c90 <MCAL_UART_Init+0x1a4>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	4a5f      	ldr	r2, [pc, #380]	; (8000c94 <MCAL_UART_Init+0x1a8>)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000b1e:	e028      	b.n	8000b72 <MCAL_UART_Init+0x86>
	}
	else if ( USARTx == USART2 ){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a5d      	ldr	r2, [pc, #372]	; (8000c98 <MCAL_UART_Init+0x1ac>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d110      	bne.n	8000b4a <MCAL_UART_Init+0x5e>
		RCC_USART2_CLK_EN();
 8000b28:	4b58      	ldr	r3, [pc, #352]	; (8000c8c <MCAL_UART_Init+0x1a0>)
 8000b2a:	69db      	ldr	r3, [r3, #28]
 8000b2c:	4a57      	ldr	r2, [pc, #348]	; (8000c8c <MCAL_UART_Init+0x1a0>)
 8000b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b32:	61d3      	str	r3, [r2, #28]
		USART_Index = 1 ;
 8000b34:	4b56      	ldr	r3, [pc, #344]	; (8000c90 <MCAL_UART_Init+0x1a4>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
		Global_UART_Config[USART_Index] = UART_Config ;
 8000b3a:	4b55      	ldr	r3, [pc, #340]	; (8000c90 <MCAL_UART_Init+0x1a4>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4a54      	ldr	r2, [pc, #336]	; (8000c94 <MCAL_UART_Init+0x1a8>)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000b48:	e013      	b.n	8000b72 <MCAL_UART_Init+0x86>
	}
	else if ( USARTx == USART3 ){
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a53      	ldr	r2, [pc, #332]	; (8000c9c <MCAL_UART_Init+0x1b0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d10f      	bne.n	8000b72 <MCAL_UART_Init+0x86>
		RCC_USART3_CLK_EN();
 8000b52:	4b4e      	ldr	r3, [pc, #312]	; (8000c8c <MCAL_UART_Init+0x1a0>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	4a4d      	ldr	r2, [pc, #308]	; (8000c8c <MCAL_UART_Init+0x1a0>)
 8000b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b5c:	61d3      	str	r3, [r2, #28]
		USART_Index = 2 ;
 8000b5e:	4b4c      	ldr	r3, [pc, #304]	; (8000c90 <MCAL_UART_Init+0x1a4>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	701a      	strb	r2, [r3, #0]
		Global_UART_Config[USART_Index] = UART_Config ;
 8000b64:	4b4a      	ldr	r3, [pc, #296]	; (8000c90 <MCAL_UART_Init+0x1a4>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4a4a      	ldr	r2, [pc, #296]	; (8000c94 <MCAL_UART_Init+0x1a8>)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}

	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13 ;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode ;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	7812      	ldrb	r2, [r2, #0]
 8000b86:	431a      	orrs	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length ;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	7a12      	ldrb	r2, [r2, #8]
 8000b94:	431a      	orrs	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity ;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	7a52      	ldrb	r2, [r2, #9]
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits ;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	7a92      	ldrb	r2, [r2, #10]
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	611a      	str	r2, [r3, #16]


	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl ;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	7ad2      	ldrb	r2, [r2, #11]
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	615a      	str	r2, [r3, #20]


	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if ( USARTx == USART1 )
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a30      	ldr	r2, [pc, #192]	; (8000c88 <MCAL_UART_Init+0x19c>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d103      	bne.n	8000bd4 <MCAL_UART_Init+0xe8>
	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000bcc:	f7ff fc54 	bl	8000478 <MCAL_RCC_GetPCLK2Freq>
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	e002      	b.n	8000bda <MCAL_UART_Init+0xee>
	}
	else //USART 2 or 3
	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000bd4:	f7ff fc3c 	bl	8000450 <MCAL_RCC_GetPCLK1Freq>
 8000bd8:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	011b      	lsls	r3, r3, #4
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be6:	0119      	lsls	r1, r3, #4
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	4613      	mov	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	009a      	lsls	r2, r3, #2
 8000bf2:	441a      	add	r2, r3
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c0a:	2064      	movs	r0, #100	; 0x64
 8000c0c:	fb00 f303 	mul.w	r3, r0, r3
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	011b      	lsls	r3, r3, #4
 8000c14:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <MCAL_UART_Init+0x1b4>)
 8000c16:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1a:	095b      	lsrs	r3, r3, #5
 8000c1c:	f003 030f 	and.w	r3, r3, #15
 8000c20:	430b      	orrs	r3, r1
 8000c22:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR ;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	609a      	str	r2, [r3, #8]


	//ENABLE / DISABLE Interrupt

	//USART_CR1
	if (UART_Config->IRQ_Enable  != UART_IRQ_Enable_NONE)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	7b1b      	ldrb	r3, [r3, #12]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d026      	beq.n	8000c80 <MCAL_UART_Init+0x194>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	7b12      	ldrb	r2, [r2, #12]
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	60da      	str	r2, [r3, #12]
	//Enable NVIC For USARTx IRQ
		if ( USARTx == USART1 )
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <MCAL_UART_Init+0x19c>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d106      	bne.n	8000c56 <MCAL_UART_Init+0x16a>
			NVIC_IRQ37_USART1_Enable ;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MCAL_UART_Init+0x1b8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <MCAL_UART_Init+0x1b8>)
 8000c4e:	f043 0320 	orr.w	r3, r3, #32
 8000c52:	6013      	str	r3, [r2, #0]

		else if ( USARTx == USART3 )
			NVIC_IRQ39_USART3_Enable ;
	}

}
 8000c54:	e014      	b.n	8000c80 <MCAL_UART_Init+0x194>
		else if ( USARTx == USART2 )
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <MCAL_UART_Init+0x1ac>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d106      	bne.n	8000c6c <MCAL_UART_Init+0x180>
			NVIC_IRQ38_USART2_Enable ;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MCAL_UART_Init+0x1b8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <MCAL_UART_Init+0x1b8>)
 8000c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c68:	6013      	str	r3, [r2, #0]
}
 8000c6a:	e009      	b.n	8000c80 <MCAL_UART_Init+0x194>
		else if ( USARTx == USART3 )
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <MCAL_UART_Init+0x1b0>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d105      	bne.n	8000c80 <MCAL_UART_Init+0x194>
			NVIC_IRQ39_USART3_Enable ;
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MCAL_UART_Init+0x1b8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <MCAL_UART_Init+0x1b8>)
 8000c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40013800 	.word	0x40013800
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	20000044 	.word	0x20000044
 8000c94:	20000038 	.word	0x20000038
 8000c98:	40004400 	.word	0x40004400
 8000c9c:	40004800 	.word	0x40004800
 8000ca0:	51eb851f 	.word	0x51eb851f
 8000ca4:	e000e104 	.word	0xe000e104

08000ca8 <MCAL_UART_SendData>:
			//			bit

 */

void MCAL_UART_SendData	(USART_TypeDef *USARTx, uint16_t *pTxBuffer,enum Polling_mechism PollingEn )
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	71fb      	strb	r3, [r7, #7]
	uint16_t *pdata;

	// wait until TXE flag is set in the SR
	if (PollingEn == enable)
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d106      	bne.n	8000cca <MCAL_UART_SendData+0x22>
		while(! (USARTx->SR & 1<<7 ) );
 8000cbc:	bf00      	nop
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0f9      	beq.n	8000cbe <MCAL_UART_SendData+0x16>
	// Which USART Will Be Used
		if (USARTx == USART1)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <MCAL_UART_SendData+0x64>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d103      	bne.n	8000cda <MCAL_UART_SendData+0x32>
			USART_Index = 0 ;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MCAL_UART_SendData+0x68>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	e00e      	b.n	8000cf8 <MCAL_UART_SendData+0x50>
		else if (USARTx == USART2)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <MCAL_UART_SendData+0x6c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d103      	bne.n	8000cea <MCAL_UART_SendData+0x42>
			USART_Index = 1 ;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MCAL_UART_SendData+0x68>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
 8000ce8:	e006      	b.n	8000cf8 <MCAL_UART_SendData+0x50>
		else if (USARTx == USART3)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <MCAL_UART_SendData+0x70>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d102      	bne.n	8000cf8 <MCAL_UART_SendData+0x50>
			USART_Index = 2 ;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <MCAL_UART_SendData+0x68>)
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	701a      	strb	r2, [r3, #0]
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);

	}else
	{
		//This is 8bit data transfer
		USARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	605a      	str	r2, [r3, #4]
	}




}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	40013800 	.word	0x40013800
 8000d10:	20000044 	.word	0x20000044
 8000d14:	40004400 	.word	0x40004400
 8000d18:	40004800 	.word	0x40004800

08000d1c <MCAL_UART_GPIO_Set_Pins>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	GPIO_PINConfig_t PinCfg ;

	if ( USARTx == USART1 )
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a2b      	ldr	r2, [pc, #172]	; (8000dd4 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d118      	bne.n	8000d5e <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d30:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d32:	2306      	movs	r3, #6
 8000d34:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 8000d36:	2303      	movs	r3, #3
 8000d38:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4825      	ldr	r0, [pc, #148]	; (8000dd8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d42:	f7ff fa97 	bl	8000274 <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	4820      	ldr	r0, [pc, #128]	; (8000dd8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d58:	f7ff fa8c 	bl	8000274 <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

		}
	}
}
 8000d5c:	e036      	b.n	8000dcc <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART2 )
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a1e      	ldr	r2, [pc, #120]	; (8000ddc <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d116      	bne.n	8000d94 <MCAL_UART_GPIO_Set_Pins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000d66:	2304      	movs	r3, #4
 8000d68:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4619      	mov	r1, r3
 8000d78:	4817      	ldr	r0, [pc, #92]	; (8000dd8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d7a:	f7ff fa7b 	bl	8000274 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000d82:	2308      	movs	r3, #8
 8000d84:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d8e:	f7ff fa71 	bl	8000274 <MCAL_GPIO_Init>
}
 8000d92:	e01b      	b.n	8000dcc <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART3 )
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d117      	bne.n	8000dcc <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000da2:	2306      	movs	r3, #6
 8000da4:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000da6:	2301      	movs	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000db2:	f7ff fa5f 	bl	8000274 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000db6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dba:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4807      	ldr	r0, [pc, #28]	; (8000de4 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000dc8:	f7ff fa54 	bl	8000274 <MCAL_GPIO_Init>
}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40013800 	.word	0x40013800
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	40004400 	.word	0x40004400
 8000de0:	40004800 	.word	0x40004800
 8000de4:	40010c00 	.word	0x40010c00

08000de8 <USART1_IRQHandler>:


//ISR
void USART1_IRQHandler (void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0

	Global_UART_Config[0]->P_IRQ_CallBack () ;
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <USART1_IRQHandler+0x10>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	4798      	blx	r3

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000038 	.word	0x20000038

08000dfc <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	Global_UART_Config[1]->P_IRQ_CallBack () ;
 8000e00:	4b02      	ldr	r3, [pc, #8]	; (8000e0c <USART2_IRQHandler+0x10>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	691b      	ldr	r3, [r3, #16]
 8000e06:	4798      	blx	r3

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000038 	.word	0x20000038

08000e10 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	Global_UART_Config[2]->P_IRQ_CallBack () ;
 8000e14:	4b02      	ldr	r3, [pc, #8]	; (8000e20 <USART3_IRQHandler+0x10>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	691b      	ldr	r3, [r3, #16]
 8000e1a:	4798      	blx	r3


}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000038 	.word	0x20000038

08000e24 <RTOS_start>:


Task_t TaskArr[RTOS_TASK_NUM] = {{0}};

void RTOS_start(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
//	TMR_timer0SetCompareMatchValue(249);
//	TMR_timer0_CTC_SetCallBack(&RTOS_scheduler);
//	GI_enable();
//	TMR_timer0Init();
	MCAL_SYSTICK_delay_ms(50);
 8000e28:	2032      	movs	r0, #50	; 0x32
 8000e2a:	f7ff fdcf 	bl	80009cc <MCAL_SYSTICK_delay_ms>
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <RTOS_createTask>:


void RTOS_createTask(u8 taskPriority, u16 taskPeriodicity, void(*pFunction)(void))
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	603a      	str	r2, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
 8000e40:	460b      	mov	r3, r1
 8000e42:	80bb      	strh	r3, [r7, #4]
	if((pFunction != NULL) && (taskPriority<RTOS_TASK_NUM))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d013      	beq.n	8000e72 <RTOS_createTask+0x3e>
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d810      	bhi.n	8000e72 <RTOS_createTask+0x3e>
	{
		TaskArr[taskPriority].periodicity    = taskPeriodicity;
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <RTOS_createTask+0x48>)
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	4413      	add	r3, r2
 8000e58:	88ba      	ldrh	r2, [r7, #4]
 8000e5a:	809a      	strh	r2, [r3, #4]
		TaskArr[taskPriority].pTaskFunc      = pFunction;
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4907      	ldr	r1, [pc, #28]	; (8000e7c <RTOS_createTask+0x48>)
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		TaskArr[taskPriority].suspendedState = RTOS_TASK_RESUMED;
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <RTOS_createTask+0x48>)
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	2202      	movs	r2, #2
 8000e70:	719a      	strb	r2, [r3, #6]
	}
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	20000048 	.word	0x20000048

08000e80 <RTOS_scheduler>:
	TaskArr[taskPriority].pTaskFunc = 0;
}


void RTOS_scheduler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
	volatile static u16 TickCounter = 0;
	TickCounter++;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <RTOS_scheduler+0x74>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <RTOS_scheduler+0x74>)
 8000e92:	801a      	strh	r2, [r3, #0]
	
	u8 taskCounter;
	for(taskCounter=0;taskCounter<RTOS_TASK_NUM;taskCounter++)
 8000e94:	2300      	movs	r3, #0
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	e024      	b.n	8000ee4 <RTOS_scheduler+0x64>
	{
		if(TaskArr[taskCounter].suspendedState == RTOS_TASK_RESUMED)
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	4a16      	ldr	r2, [pc, #88]	; (8000ef8 <RTOS_scheduler+0x78>)
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	4413      	add	r3, r2
 8000ea2:	799b      	ldrb	r3, [r3, #6]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d11a      	bne.n	8000ede <RTOS_scheduler+0x5e>
		{
			if((TickCounter%TaskArr[taskCounter].periodicity) == 0)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <RTOS_scheduler+0x74>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4911      	ldr	r1, [pc, #68]	; (8000ef8 <RTOS_scheduler+0x78>)
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	440b      	add	r3, r1
 8000eb6:	889b      	ldrh	r3, [r3, #4]
 8000eb8:	fbb2 f1f3 	udiv	r1, r2, r3
 8000ebc:	fb03 f301 	mul.w	r3, r3, r1
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10a      	bne.n	8000ede <RTOS_scheduler+0x5e>
			{
				if(TaskArr[taskCounter].pTaskFunc != NULL)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <RTOS_scheduler+0x78>)
 8000ecc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d004      	beq.n	8000ede <RTOS_scheduler+0x5e>
				{
					TaskArr[taskCounter].pTaskFunc();
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <RTOS_scheduler+0x78>)
 8000ed8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000edc:	4798      	blx	r3
	for(taskCounter=0;taskCounter<RTOS_TASK_NUM;taskCounter++)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d9d7      	bls.n	8000e9a <RTOS_scheduler+0x1a>
				}
			}
		}
	}
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000058 	.word	0x20000058
 8000ef8:	20000048 	.word	0x20000048

08000efc <main>:
/* GLOBAL Functions */



int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	/* Replace with your application code */
	init();
 8000f00:	f000 f910 	bl	8001124 <init>
	RTOS_createTask(0,50,&Read_Button_State);
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <main+0x24>)
 8000f06:	2132      	movs	r1, #50	; 0x32
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff ff93 	bl	8000e34 <RTOS_createTask>
	RTOS_createTask(1,50,&SPI_Send_Message);
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <main+0x28>)
 8000f10:	2132      	movs	r1, #50	; 0x32
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff ff8e 	bl	8000e34 <RTOS_createTask>
	//	RTOS_createTask(2,50,&Uart_Send_State);
	RTOS_start();
 8000f18:	f7ff ff84 	bl	8000e24 <RTOS_start>
	while (1)
 8000f1c:	e7fe      	b.n	8000f1c <main+0x20>
 8000f1e:	bf00      	nop
 8000f20:	08000f29 	.word	0x08000f29
 8000f24:	08000fc9 	.word	0x08000fc9

08000f28 <Read_Button_State>:
	{
	}
}


void Read_Button_State(void){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
	u8 retval1=0,retval2=0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	2300      	movs	r3, #0
 8000f34:	71bb      	strb	r3, [r7, #6]
	PB2_Flag = 0 ;
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <Read_Button_State+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
	PB1_Flag = 0;
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <Read_Button_State+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]

	/**********		PB2 check		*************/
	if(MCAL_GPIO_ReadPin(GPIOA, PB2)){
 8000f42:	2104      	movs	r1, #4
 8000f44:	481f      	ldr	r0, [pc, #124]	; (8000fc4 <Read_Button_State+0x9c>)
 8000f46:	f7ff fa22 	bl	800038e <MCAL_GPIO_ReadPin>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00f      	beq.n	8000f70 <Read_Button_State+0x48>
		dms(20);
 8000f50:	2014      	movs	r0, #20
 8000f52:	f7ff fdb3 	bl	8000abc <dms>
		if(MCAL_GPIO_ReadPin(GPIOA, PB2)){
 8000f56:	2104      	movs	r1, #4
 8000f58:	481a      	ldr	r0, [pc, #104]	; (8000fc4 <Read_Button_State+0x9c>)
 8000f5a:	f7ff fa18 	bl	800038e <MCAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <Read_Button_State+0x42>
			retval2 = PB2_Press;
 8000f64:	2303      	movs	r3, #3
 8000f66:	71bb      	strb	r3, [r7, #6]
 8000f68:	e004      	b.n	8000f74 <Read_Button_State+0x4c>
		}else {
			retval2 = NoPress;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	71bb      	strb	r3, [r7, #6]
 8000f6e:	e001      	b.n	8000f74 <Read_Button_State+0x4c>
		}
	}else {
		retval2 = NoPress;
 8000f70:	2301      	movs	r3, #1
 8000f72:	71bb      	strb	r3, [r7, #6]
	}
	PB2_Flag = retval2;
 8000f74:	4a11      	ldr	r2, [pc, #68]	; (8000fbc <Read_Button_State+0x94>)
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	7013      	strb	r3, [r2, #0]
	//		retval2 = NoPress;
	//	}
	//	PB2_Flag = retval2;

	/**********		PB1 check		*************/
	if(HAL_button_u8read(GPIOA, PB1)){
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <Read_Button_State+0x9c>)
 8000f7e:	f7ff f905 	bl	800018c <HAL_button_u8read>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00f      	beq.n	8000fa8 <Read_Button_State+0x80>
		dms(20);
 8000f88:	2014      	movs	r0, #20
 8000f8a:	f7ff fd97 	bl	8000abc <dms>
		if(HAL_button_u8read(GPIOA, PB1)){
 8000f8e:	2102      	movs	r1, #2
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <Read_Button_State+0x9c>)
 8000f92:	f7ff f8fb 	bl	800018c <HAL_button_u8read>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <Read_Button_State+0x7a>
			retval1 = PB1_Press;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	e004      	b.n	8000fac <Read_Button_State+0x84>
		}else {
			retval1 = NoPress;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	e001      	b.n	8000fac <Read_Button_State+0x84>
		}
	}else {
		retval1 = NoPress;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	71fb      	strb	r3, [r7, #7]
	}
	PB1_Flag = retval1;
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <Read_Button_State+0x98>)
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	7013      	strb	r3, [r2, #0]



}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000005b 	.word	0x2000005b
 8000fc0:	2000005a 	.word	0x2000005a
 8000fc4:	40010800 	.word	0x40010800

08000fc8 <SPI_Send_Message>:

void SPI_Send_Message(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	if (PB1_Flag == PB1_Press && PB2_Flag == PB2_Press) {
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <SPI_Send_Message+0x78>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d108      	bne.n	8000fe8 <SPI_Send_Message+0x20>
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <SPI_Send_Message+0x7c>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d103      	bne.n	8000fe8 <SPI_Send_Message+0x20>
		ch= TwoPress;
 8000fe0:	4b19      	ldr	r3, [pc, #100]	; (8001048 <SPI_Send_Message+0x80>)
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e014      	b.n	8001012 <SPI_Send_Message+0x4a>
	} else if(PB1_Flag == PB1_Press ) {
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <SPI_Send_Message+0x78>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d103      	bne.n	8000ffa <SPI_Send_Message+0x32>
		ch= PB1_Press;
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <SPI_Send_Message+0x80>)
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	e00b      	b.n	8001012 <SPI_Send_Message+0x4a>
	}else if (PB2_Flag == PB2_Press) {
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <SPI_Send_Message+0x7c>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b03      	cmp	r3, #3
 8001002:	d103      	bne.n	800100c <SPI_Send_Message+0x44>
		ch= PB2_Press;
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <SPI_Send_Message+0x80>)
 8001006:	2203      	movs	r2, #3
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e002      	b.n	8001012 <SPI_Send_Message+0x4a>
	}else{
		ch=NoPress;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <SPI_Send_Message+0x80>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
	}
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2110      	movs	r1, #16
 8001016:	480d      	ldr	r0, [pc, #52]	; (800104c <SPI_Send_Message+0x84>)
 8001018:	f7ff f9d0 	bl	80003bc <MCAL_GPIO_WritePin>
	ch_temp = ch;
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <SPI_Send_Message+0x80>)
 800101e:	781a      	ldrb	r2, [r3, #0]
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <SPI_Send_Message+0x88>)
 8001022:	701a      	strb	r2, [r3, #0]
	Uart_Send_State();
 8001024:	f000 f818 	bl	8001058 <Uart_Send_State>
	MCAL_SPI_SendData(SPI1, &ch, Pollingenable);
 8001028:	2200      	movs	r2, #0
 800102a:	4907      	ldr	r1, [pc, #28]	; (8001048 <SPI_Send_Message+0x80>)
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <SPI_Send_Message+0x8c>)
 800102e:	f7ff fae3 	bl	80005f8 <MCAL_SPI_SendData>
	//	MCAL_SPI_TX_RX(SPI1, &ch, Pollingenable);
	//set NSS pin from GPIO
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001032:	2201      	movs	r2, #1
 8001034:	2110      	movs	r1, #16
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <SPI_Send_Message+0x84>)
 8001038:	f7ff f9c0 	bl	80003bc <MCAL_GPIO_WritePin>
	//ch = ch_temp;
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000005a 	.word	0x2000005a
 8001044:	2000005b 	.word	0x2000005b
 8001048:	2000005c 	.word	0x2000005c
 800104c:	40010800 	.word	0x40010800
 8001050:	2000005d 	.word	0x2000005d
 8001054:	40013000 	.word	0x40013000

08001058 <Uart_Send_State>:

void Uart_Send_State(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	ch = ch_temp;
 800105c:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <Uart_Send_State+0xbc>)
 800105e:	781a      	ldrb	r2, [r3, #0]
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <Uart_Send_State+0xc0>)
 8001062:	701a      	strb	r2, [r3, #0]
	switch (lastMessage) {
 8001064:	4b2d      	ldr	r3, [pc, #180]	; (800111c <Uart_Send_State+0xc4>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	3b41      	subs	r3, #65	; 0x41
 800106a:	2b05      	cmp	r3, #5
 800106c:	d81e      	bhi.n	80010ac <Uart_Send_State+0x54>
 800106e:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <Uart_Send_State+0x1c>)
 8001070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001074:	0800108d 	.word	0x0800108d
 8001078:	08001095 	.word	0x08001095
 800107c:	0800109d 	.word	0x0800109d
 8001080:	080010ad 	.word	0x080010ad
 8001084:	080010ad 	.word	0x080010ad
 8001088:	080010a5 	.word	0x080010a5
			case 'A':
				lastMessage = PB1_Press;
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <Uart_Send_State+0xc4>)
 800108e:	2202      	movs	r2, #2
 8001090:	701a      	strb	r2, [r3, #0]
				break;
 8001092:	e00c      	b.n	80010ae <Uart_Send_State+0x56>
			case 'B':
				lastMessage = PB2_Press;
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <Uart_Send_State+0xc4>)
 8001096:	2203      	movs	r2, #3
 8001098:	701a      	strb	r2, [r3, #0]
				break;
 800109a:	e008      	b.n	80010ae <Uart_Send_State+0x56>
			case 'C':
				lastMessage = TwoPress;
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <Uart_Send_State+0xc4>)
 800109e:	2204      	movs	r2, #4
 80010a0:	701a      	strb	r2, [r3, #0]
				break;
 80010a2:	e004      	b.n	80010ae <Uart_Send_State+0x56>
			case 'F':
				lastMessage = NoPress;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <Uart_Send_State+0xc4>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
				break;
 80010aa:	e000      	b.n	80010ae <Uart_Send_State+0x56>
			default:
				break;
 80010ac:	bf00      	nop
	}
	if (lastMessage == ch) {
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <Uart_Send_State+0xc4>)
 80010b0:	781a      	ldrb	r2, [r3, #0]
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <Uart_Send_State+0xc0>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d02a      	beq.n	8001110 <Uart_Send_State+0xb8>

	} else {
		//send new
		switch (ch) {
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <Uart_Send_State+0xc0>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	3b01      	subs	r3, #1
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d81b      	bhi.n	80010fc <Uart_Send_State+0xa4>
 80010c4:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <Uart_Send_State+0x74>)
 80010c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ca:	bf00      	nop
 80010cc:	080010f5 	.word	0x080010f5
 80010d0:	080010dd 	.word	0x080010dd
 80010d4:	080010e5 	.word	0x080010e5
 80010d8:	080010ed 	.word	0x080010ed
		case PB1_Press:
			ch = 'A';
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <Uart_Send_State+0xc0>)
 80010de:	2241      	movs	r2, #65	; 0x41
 80010e0:	701a      	strb	r2, [r3, #0]
			break;
 80010e2:	e00c      	b.n	80010fe <Uart_Send_State+0xa6>
		case PB2_Press:
			ch = 'B';
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <Uart_Send_State+0xc0>)
 80010e6:	2242      	movs	r2, #66	; 0x42
 80010e8:	701a      	strb	r2, [r3, #0]
			break;
 80010ea:	e008      	b.n	80010fe <Uart_Send_State+0xa6>
		case TwoPress:
			ch = 'C';
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <Uart_Send_State+0xc0>)
 80010ee:	2243      	movs	r2, #67	; 0x43
 80010f0:	701a      	strb	r2, [r3, #0]
			break;
 80010f2:	e004      	b.n	80010fe <Uart_Send_State+0xa6>
		case NoPress:
			ch = 'F';
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <Uart_Send_State+0xc0>)
 80010f6:	2246      	movs	r2, #70	; 0x46
 80010f8:	701a      	strb	r2, [r3, #0]
			break;
 80010fa:	e000      	b.n	80010fe <Uart_Send_State+0xa6>
		default:
			break;
 80010fc:	bf00      	nop
		}
		MCAL_UART_SendData(USART1, &ch, enable);
 80010fe:	2200      	movs	r2, #0
 8001100:	4905      	ldr	r1, [pc, #20]	; (8001118 <Uart_Send_State+0xc0>)
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <Uart_Send_State+0xc8>)
 8001104:	f7ff fdd0 	bl	8000ca8 <MCAL_UART_SendData>
		//save new
		lastMessage = ch;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <Uart_Send_State+0xc0>)
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <Uart_Send_State+0xc4>)
 800110e:	701a      	strb	r2, [r3, #0]
	}
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000005d 	.word	0x2000005d
 8001118:	2000005c 	.word	0x2000005c
 800111c:	2000005e 	.word	0x2000005e
 8001120:	40013800 	.word	0x40013800

08001124 <init>:


void init(void){
 8001124:	b580      	push	{r7, lr}
 8001126:	b08e      	sub	sp, #56	; 0x38
 8001128:	af00      	add	r7, sp, #0
	/* Enable clock for GPIOA*/
	RCC_GPIOA_CLK_EN();
 800112a:	4b3c      	ldr	r3, [pc, #240]	; (800121c <init+0xf8>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a3b      	ldr	r2, [pc, #236]	; (800121c <init+0xf8>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8001136:	4b39      	ldr	r3, [pc, #228]	; (800121c <init+0xf8>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	4a38      	ldr	r2, [pc, #224]	; (800121c <init+0xf8>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <init+0xf8>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	4a35      	ldr	r2, [pc, #212]	; (800121c <init+0xf8>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6193      	str	r3, [r2, #24]

	/* Init Push Buttons PA1 & PA2 as input floating */
	HAL_button_vInit(GPIOA, &PB1config);
 800114e:	4934      	ldr	r1, [pc, #208]	; (8001220 <init+0xfc>)
 8001150:	4834      	ldr	r0, [pc, #208]	; (8001224 <init+0x100>)
 8001152:	f7ff f80d 	bl	8000170 <HAL_button_vInit>
	//HAL_button_vInit(GPIOA, &PB2config);
	GPIO_PINConfig_t PB_A2;
	PB_A2.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001156:	2301      	movs	r3, #1
 8001158:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	PB_A2.GPIO_PinNumber = GPIO_PIN_2;
 800115c:	2304      	movs	r3, #4
 800115e:	86bb      	strh	r3, [r7, #52]	; 0x34
	MCAL_GPIO_Init(GPIOA, &PB_A2);
 8001160:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001164:	4619      	mov	r1, r3
 8001166:	482f      	ldr	r0, [pc, #188]	; (8001224 <init+0x100>)
 8001168:	f7ff f884 	bl	8000274 <MCAL_GPIO_Init>

	/* Systick Init*/
	MCAL_SYSTICK_Init(&SystickConfig);
 800116c:	482e      	ldr	r0, [pc, #184]	; (8001228 <init+0x104>)
 800116e:	f7ff fbd5 	bl	800091c <MCAL_SYSTICK_Init>

	/* Timer2 Init*/
	Timer2_init();
 8001172:	f7ff fc67 	bl	8000a44 <Timer2_init>
	//PA9	TX
	//PA10	RX
	//PA11	CTS
	//PA12	RTS
	UART_Config uartCFG;
	uartCFG.BaudRate = UART_BaudRate_115200;
 8001176:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
	uartCFG.HwFlowCtl = UART_HwFlowCtl_NONE;
 800117c:	2300      	movs	r3, #0
 800117e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uartCFG.Parity = UART_Parity__NONE;
 8001182:	2300      	movs	r3, #0
 8001184:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uartCFG.Payload_Length = UART_Payload_Length_8B;
 8001188:	2300      	movs	r3, #0
 800118a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uartCFG.StopBits = UART_StopBits__1;
 800118e:	2300      	movs	r3, #0
 8001190:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uartCFG.USART_Mode = UART_MODE_TX_RX;
 8001194:	230c      	movs	r3, #12
 8001196:	f887 3020 	strb.w	r3, [r7, #32]
	uartCFG.IRQ_Enable = UART_IRQ_Enable_NONE;	//when RXNEIE is set go to irq handler to receive(read data from register)
 800119a:	2300      	movs	r3, #0
 800119c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uartCFG.P_IRQ_CallBack = NULL ;    // address of function without brackets!!!!!!
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
	MCAL_UART_Init(USART1,&uartCFG);
 80011a4:	f107 0320 	add.w	r3, r7, #32
 80011a8:	4619      	mov	r1, r3
 80011aa:	4820      	ldr	r0, [pc, #128]	; (800122c <init+0x108>)
 80011ac:	f7ff fc9e 	bl	8000aec <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80011b0:	481e      	ldr	r0, [pc, #120]	; (800122c <init+0x108>)
 80011b2:	f7ff fdb3 	bl	8000d1c <MCAL_UART_GPIO_Set_Pins>
	//PA6	MISO
	//PA7	MOSI
	SPI_Config_t SPI1CFG;
	GPIO_PINConfig_t PinCnfg;
	//Common Configuration between master and slave
	SPI1CFG.CLKPhase 			  =	SPI_Clock_Phase_2EDGE_first_data_capture_edge;
 80011b6:	2301      	movs	r3, #1
 80011b8:	827b      	strh	r3, [r7, #18]
	SPI1CFG.CLKPolarity			  =	SPI_CLKPolarity_HIGH_when_idle;
 80011ba:	2302      	movs	r3, #2
 80011bc:	823b      	strh	r3, [r7, #16]
	SPI1CFG.DataSize 			  =	SPI_DataSize_8BIT;
 80011be:	2300      	movs	r3, #0
 80011c0:	81fb      	strh	r3, [r7, #14]
	SPI1CFG.Frame_Format		  =	SPI_Frame_Format_MSB_transmitted_first;
 80011c2:	2300      	movs	r3, #0
 80011c4:	81bb      	strh	r3, [r7, #12]
	//assume pclk2 8MHZ by default (NOT MODIFIED)
	SPI1CFG.SPI_BAUDRATEPRESCALER =	SPI_BAUDRATEPRESCALER_8;
 80011c6:	2310      	movs	r3, #16
 80011c8:	82fb      	strh	r3, [r7, #22]
	SPI1CFG.Communication_Mode    =	SPI_DIRECTION_2LINES;
 80011ca:	2300      	movs	r3, #0
 80011cc:	817b      	strh	r3, [r7, #10]
	SPI1CFG.Device_Mode		  = SPI_Device_Mode_MASTER;
 80011ce:	2304      	movs	r3, #4
 80011d0:	813b      	strh	r3, [r7, #8]
	SPI1CFG.IRQ_Enable	      = SPI_IRQ_Enable_NONE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	833b      	strh	r3, [r7, #24]
	SPI1CFG.NSS	              = SPI_NSS_Soft_NSSInternalSoft_Set;		//you are the only master on the bus
 80011d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011da:	82bb      	strh	r3, [r7, #20]
	SPI1CFG.P_IRQ_CallBack	  = NULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
	MCAL_SPI_Init(SPI1, &SPI1CFG);
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	4619      	mov	r1, r3
 80011e6:	4812      	ldr	r0, [pc, #72]	; (8001230 <init+0x10c>)
 80011e8:	f7ff f95a 	bl	80004a0 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 80011ec:	4810      	ldr	r0, [pc, #64]	; (8001230 <init+0x10c>)
 80011ee:	f7ff fa43 	bl	8000678 <MCAL_SPI_GPIO_Set_Pins>
	/*	Configure slave PA4		*/
	PinCnfg.GPIO_PinNumber 	  = GPIO_PIN_4;
 80011f2:	2310      	movs	r3, #16
 80011f4:	80bb      	strh	r3, [r7, #4]
	PinCnfg.GPIO_MODE		  = GPIO_MODE_OUTPUT_PP;
 80011f6:	2304      	movs	r3, #4
 80011f8:	71bb      	strb	r3, [r7, #6]
	PinCnfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80011fa:	2301      	movs	r3, #1
 80011fc:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PinCnfg);
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4619      	mov	r1, r3
 8001202:	4808      	ldr	r0, [pc, #32]	; (8001224 <init+0x100>)
 8001204:	f7ff f836 	bl	8000274 <MCAL_GPIO_Init>
	//Force slave select pin high
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001208:	2201      	movs	r2, #1
 800120a:	2110      	movs	r1, #16
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <init+0x100>)
 800120e:	f7ff f8d5 	bl	80003bc <MCAL_GPIO_WritePin>
}
 8001212:	bf00      	nop
 8001214:	3738      	adds	r7, #56	; 0x38
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	20000000 	.word	0x20000000
 8001224:	40010800 	.word	0x40010800
 8001228:	20000004 	.word	0x20000004
 800122c:	40013800 	.word	0x40013800
 8001230:	40013000 	.word	0x40013000

08001234 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001236:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001238:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <LoopForever+0x6>)
  ldr r1, =_edata
 800123e:	490d      	ldr	r1, [pc, #52]	; (8001274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <LoopForever+0xe>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001254:	4c0a      	ldr	r4, [pc, #40]	; (8001280 <LoopForever+0x16>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001262:	f000 f811 	bl	8001288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001266:	f7ff fe49 	bl	8000efc <main>

0800126a <LoopForever>:

LoopForever:
    b LoopForever
 800126a:	e7fe      	b.n	800126a <LoopForever>
  ldr   r0, =_estack
 800126c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001278:	08001308 	.word	0x08001308
  ldr r2, =_sbss
 800127c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001280:	20000090 	.word	0x20000090

08001284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC1_2_IRQHandler>
	...

08001288 <__libc_init_array>:
 8001288:	b570      	push	{r4, r5, r6, lr}
 800128a:	2500      	movs	r5, #0
 800128c:	4e0c      	ldr	r6, [pc, #48]	; (80012c0 <__libc_init_array+0x38>)
 800128e:	4c0d      	ldr	r4, [pc, #52]	; (80012c4 <__libc_init_array+0x3c>)
 8001290:	1ba4      	subs	r4, r4, r6
 8001292:	10a4      	asrs	r4, r4, #2
 8001294:	42a5      	cmp	r5, r4
 8001296:	d109      	bne.n	80012ac <__libc_init_array+0x24>
 8001298:	f000 f81a 	bl	80012d0 <_init>
 800129c:	2500      	movs	r5, #0
 800129e:	4e0a      	ldr	r6, [pc, #40]	; (80012c8 <__libc_init_array+0x40>)
 80012a0:	4c0a      	ldr	r4, [pc, #40]	; (80012cc <__libc_init_array+0x44>)
 80012a2:	1ba4      	subs	r4, r4, r6
 80012a4:	10a4      	asrs	r4, r4, #2
 80012a6:	42a5      	cmp	r5, r4
 80012a8:	d105      	bne.n	80012b6 <__libc_init_array+0x2e>
 80012aa:	bd70      	pop	{r4, r5, r6, pc}
 80012ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012b0:	4798      	blx	r3
 80012b2:	3501      	adds	r5, #1
 80012b4:	e7ee      	b.n	8001294 <__libc_init_array+0xc>
 80012b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012ba:	4798      	blx	r3
 80012bc:	3501      	adds	r5, #1
 80012be:	e7f2      	b.n	80012a6 <__libc_init_array+0x1e>
 80012c0:	08001300 	.word	0x08001300
 80012c4:	08001300 	.word	0x08001300
 80012c8:	08001300 	.word	0x08001300
 80012cc:	08001304 	.word	0x08001304

080012d0 <_init>:
 80012d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d2:	bf00      	nop
 80012d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012d6:	bc08      	pop	{r3}
 80012d8:	469e      	mov	lr, r3
 80012da:	4770      	bx	lr

080012dc <_fini>:
 80012dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012de:	bf00      	nop
 80012e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012e2:	bc08      	pop	{r3}
 80012e4:	469e      	mov	lr, r3
 80012e6:	4770      	bx	lr
